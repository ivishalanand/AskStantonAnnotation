# Generated by Django 5.2.6 on 2025-09-08 05:31

from django.db import migrations
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType


def create_tool_groups(apps, schema_editor):
    """
    Create permission groups for admin tools.
    This sets up basic access control for the annotation tool and session viewer.
    """
    # Create groups for each tool
    annotation_group, created = Group.objects.get_or_create(name='annotation_users')
    session_group, created = Group.objects.get_or_create(name='session_viewers')
    
    # Note: Since we don't have specific models for the tools yet,
    # we'll create basic groups that can be checked by name
    # In a full implementation, you would add specific permissions here
    
    print(f"✓ Created group: {annotation_group.name}")
    print(f"✓ Created group: {session_group.name}")


def reverse_create_tool_groups(apps, schema_editor):
    """
    Remove the tool groups if migration is reversed.
    """
    Group.objects.filter(name__in=['annotation_users', 'session_viewers']).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.RunPython(create_tool_groups, reverse_create_tool_groups),
    ]
